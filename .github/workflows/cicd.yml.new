name: ProbeOps Frontend CI/CD

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # Allows manual triggering
  schedule:
    - cron: '0 8 * * 1'  # Run every Monday at 8:00 AM UTC

env:
  NODE_VERSION: '20'

jobs:
  # Build and test job
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Setup Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Update browserslist DB
      run: npx update-browserslist-db@latest
      
    - name: Build project
      run: npm run build
      env:
        VITE_API_URL: ${{ secrets.VITE_API_URL || 'https://probeops.com/api' }}
      
    - name: Archive production artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist
        path: dist
        retention-days: 5

  # Deploy job - only runs on push to main/master, not on pull requests
  deploy:
    needs: build-and-test
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: dist
        path: dist
        
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_TOKEN }}
        
    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: ${{ secrets.DOCKER_HUB_USERNAME }}/probeops-frontend:latest,${{ secrets.DOCKER_HUB_USERNAME }}/probeops-frontend:${{ github.sha }}
        cache-from: type=registry,ref=${{ secrets.DOCKER_HUB_USERNAME }}/probeops-frontend:buildcache
        cache-to: type=registry,ref=${{ secrets.DOCKER_HUB_USERNAME }}/probeops-frontend:buildcache,mode=max
        
    # Optional: Deploy to your server using SSH
    - name: Deploy to production server
      if: ${{ secrets.DEPLOY_SSH_KEY != '' }}
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.DEPLOY_HOST }}
        username: ${{ secrets.DEPLOY_USER }}
        key: ${{ secrets.DEPLOY_SSH_KEY }}
        script: |
          cd /path/to/deployment
          docker compose pull
          docker compose down
          docker compose up -d
          docker system prune -af
          
    # Verify the deployment
    - name: Verify deployment
      id: verify
      if: ${{ success() && (secrets.DEPLOY_SSH_KEY != '') }}
      run: |
        chmod +x .github/scripts/verify-deployment.sh
        .github/scripts/verify-deployment.sh ${{ secrets.DEPLOYMENT_URL || 'https://probeops.com' }}
  
  # Notifications job
  notify:
    needs: [build-and-test, deploy]
    if: always()
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Get deployment status
      id: status
      run: |
        if [[ "${{ needs.build-and-test.result }}" == "success" && "${{ needs.deploy.result }}" == "success" ]]; then
          echo "status=success" >> $GITHUB_OUTPUT
          echo "emoji=✅" >> $GITHUB_OUTPUT
          echo "message=Deployment completed successfully!" >> $GITHUB_OUTPUT
        elif [[ "${{ needs.build-and-test.result }}" == "success" && "${{ needs.deploy.result }}" != "success" ]]; then
          echo "status=warning" >> $GITHUB_OUTPUT
          echo "emoji=⚠️" >> $GITHUB_OUTPUT
          echo "message=Build succeeded but deployment failed." >> $GITHUB_OUTPUT
        else
          echo "status=failure" >> $GITHUB_OUTPUT
          echo "emoji=❌" >> $GITHUB_OUTPUT
          echo "message=Build failed." >> $GITHUB_OUTPUT
        fi
    
    # Slack notification (optional)
    - name: Send Slack notification
      if: ${{ secrets.SLACK_WEBHOOK_URL != '' }}
      uses: slackapi/slack-github-action@v1.23.0
      with:
        payload: |
          {
            "text": "${{ steps.status.outputs.emoji }} ProbeOps Frontend Deployment: ${{ steps.status.outputs.message }}",
            "blocks": [
              {
                "type": "header",
                "text": {
                  "type": "plain_text",
                  "text": "${{ steps.status.outputs.emoji }} ProbeOps Frontend Deployment"
                }
              },
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "*Status:* ${{ steps.status.outputs.message }}\n*Branch:* ${{ github.ref_name }}\n*Commit:* ${{ github.sha }}\n*Triggered by:* ${{ github.actor }}"
                }
              },
              {
                "type": "actions",
                "elements": [
                  {
                    "type": "button",
                    "text": {
                      "type": "plain_text",
                      "text": "View Workflow"
                    },
                    "url": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                  }
                ]
              }
            ]
          }
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
    
    # Email notification (optional)
    - name: Send email notification
      if: ${{ secrets.NOTIFICATION_EMAIL != '' }}
      uses: dawidd6/action-send-mail@v3
      with:
        server_address: ${{ secrets.SMTP_SERVER }}
        server_port: ${{ secrets.SMTP_PORT }}
        username: ${{ secrets.SMTP_USERNAME }}
        password: ${{ secrets.SMTP_PASSWORD }}
        subject: "[${{ steps.status.outputs.status }}] ProbeOps Frontend Deployment"
        body: |
          ${{ steps.status.outputs.emoji }} ProbeOps Frontend Deployment: ${{ steps.status.outputs.message }}
          
          Branch: ${{ github.ref_name }}
          Commit: ${{ github.sha }}
          Triggered by: ${{ github.actor }}
          
          View the workflow run here: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
        to: ${{ secrets.NOTIFICATION_EMAIL }}
        from: ProbeOps CI/CD System